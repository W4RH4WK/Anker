require 'set'

# Rake.application.options.trace_rules = true

TOOLS_DIR = File.join(__dir__, '..', 'tools')

FXC = File.join(TOOLS_DIR, 'fxc.exe')
TEXCONV = File.join(TOOLS_DIR, 'texconv.exe')
TEXASSEMBLE = File.join(TOOLS_DIR, 'texassemble.exe')

SHADER_DEBUG = ENV['SHADER_DEBUG'] == '1'

############################################################

VERTEX_SHADERS = FileList[
  'shaders/gizmo',
  'shaders/map',
  'shaders/screen',
  'shaders/sprite',
  'shaders/text',
]

PIXEL_SHADERS = FileList[
  'shaders/gizmo',
  'shaders/map',
  'shaders/post_process',
  'shaders/sprite',
  'shaders/text',
]

TEXTURES = FileList[
  'fallback/fallback_texture.png',
  'tilesets/*.png',
]

############################################################

# Returns a list of all shader dependencies. Transitive dependencies are
# included, the given file is included as first element as well.
def shader_dependencies(file)
  def shader_dependencies_recursive(file, children)
    IO.foreach(file) do |line|
      if line =~ /#include *["<](.*)[">]/
        child = File.join(File.dirname(file), $1)
        if not children.include?(child) and File.exist?(child)
          children << child
          shader_dependencies_recursive(child, children)
        end
      end
    end
  end
  children = Set[]
  shader_dependencies_recursive(file, children)
  FileList[file, Array(children)]
end

VERTEX_SHADERS.each do |shader|
  file shader.pathmap('%p.vs.fxo') => shader_dependencies(shader.pathmap('%p.hlsl')) do |t|
    flags = SHADER_DEBUG ? '/Od /Zi /Zss' : '/O3 /Qstrip_debug'
    sh "#{FXC} /nologo /T vs_5_0 /D ANKER_VS #{t.source} /Fo #{t.name} #{flags}"
  end
end
task shaders: VERTEX_SHADERS.pathmap('%p.vs.fxo')

PIXEL_SHADERS.each do |shader|
  file shader.pathmap('%p.ps.fxo') => shader_dependencies(shader.pathmap('%p.hlsl')) do |t|
    flags = SHADER_DEBUG ? '/Od /Zi /Zss' : '/O3 /Qstrip_debug'
    sh "#{FXC} /nologo /T ps_5_0 /D ANKER_PS #{t.source} /Fo #{t.name} #{flags}"
  end
end
task shaders: PIXEL_SHADERS.pathmap('%p.ps.fxo')

TEXTURES.each do |texture|
  file texture.pathmap('%X.dds') => texture do |t|
    sh "#{TEXCONV} -nologo -f BC7_UNORM -y #{t.source}"
  end
end
task textures: TEXTURES.pathmap('%X.dds')

task default: [:shaders, :textures]

desc "Continuously run rake to build assets"
task :watch do
  while true
    sh "rake", verbose: false do
      # ignore failure
    end
    sleep 2
  end
end
